Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12



1) Recursive approach

// Time complexity : O(m * n)
// Space complexity : O(m * n)

class Solution {
public:
    int findMinPathSum(vector<vector<int>> &grid, int i, int j,                                              vector<vector<int>> &dp)
    {
        if(i >= grid.size() || j >= grid[0].size()) return INT_MAX;
        
        if(i == grid.size()-1 && j == grid[0].size()-1) return grid[i][j];
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int right = findMinPathSum(grid, i, j+1, dp);
        int down  = findMinPathSum(grid, i+1, j, dp);
        
        return dp[i][j] = min(right , down) + grid[i][j];        
    }
    
    int minPathSum(vector<vector<int>>& grid) { 
        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), -1));
        
        return findMinPathSum(grid, 0, 0, dp);
    }
};

2) Iterative approach

// Time complexity : O(m * n)
// Space complexity : O(m * n)

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) { 
        
        int row = grid.size(), col = grid[0].size();
        vector<vector<int>> dp(row, vector<int>(col));
        
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(i == 0 && j == 0) 
                    dp[i][j] = grid[i][j];
                
                else if(i > 0 && j > 0)
                    dp[i][j] = min(dp[i-1][j] , dp[i][j-1]) + grid[i][j];
                
                else if(i > 0 && j == 0)
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                
                else
                    dp[i][j] = grid[i][j] + dp[i][j-1];
            }
        }
        
        return dp[row-1][col-1];
    }
};
