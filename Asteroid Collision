Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
Example 4:

Input: asteroids = [-2,-1,1,2]
Output: [-2,-1,1,2]
Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.

1) using stack
// Time complexity : O(n + n)
// space complexity : O(n)
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& nums) {
        
        int n = nums.size();
        stack<int> st;
        
        for(int i=0; i<n; i++)
        {
            if(nums[i] > 0 || st.empty())
                st.push(nums[i]);
            else{
                while(!st.empty() && st.top() > 0 && st.top() < abs(nums[i]))
                    st.pop();
                
                if(!st.empty() && st.top() == abs(nums[i]))
                    st.pop();
                else{
                    if(st.empty() || st.top() < 0)
                        st.push(nums[i]);
                }
            }
        }
        
        vector<int> res(st.size());
        for(int i=st.size()-1; i>=0; i--)
        {
            res[i] = st.top();
            st.pop();
        }
        
        return res;
    }
};

2) Optimal approach

// Time complexity : O(n + n)
// space complexity : O(1)

class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        vector<int> res;
        
        for(auto ast : asteroids)
        {
            bool isDestroyed = false;
            
            while(res.size() > 0 && !isDestroyed && res.back() > 0 && ast < 0)
            {
                if(res.back() >= abs(ast)) isDestroyed = true;
                
                if(res.back() <= abs(ast)) res.pop_back();
                
            }
            
            if(!isDestroyed) res.push_back(ast);
        }
        
        
        return res;
    }
    
};
