Example 1:

Input:
S = "aba", K = 2
Output:
3
Explanation:
The substrings are:
"ab", "ba" and "aba".
Example 2:

Input: 
S = "abaaca", K = 1
Output:
7
Explanation:
The substrings are:
"a", "b", "a", "aa", "a", "c", "a". 


 
class Solution
{
  public:
    void removeInMap(unordered_map<char,int> &mp, char ch)
    {
        if(mp[ch] == 1) 
        mp.erase(ch);
        else{
            mp[ch]--;
        }
    }
    
    long long int findCount(string s, int k)
    {
        long long int i = 0, j = 0, res = 0, n = s.size();
        unordered_map<char,int> mp;
        
        while(1)
        {
            bool f1 = false, f2 = false;
           while(i < n-1)
    	   {
    	       f1 = true;
    	       char ch = s[i];
    	       mp[ch]++;
    	       
    	       if(mp.size() == 2)
    	       {
    	           removeInMap(mp, ch);
    	           --i;
    	           break;
    	       }
    	       
    	       ++i;
    	   }
    	   
    	   while(j < i)
    	   {
    	       f2 = true;
    	       if(mp.size() == k)
    	       {
    	           res += i-j;
    	       }
    	       
    	       char ch = s[j];
    	       removeInMap(mp, ch);
    	       
    	       j++;
    	       
    	       if(mp.size() == 0) break;
    	   }
    	   
    	   if(!f1 && !f2) break;
        }
        
        return res;
    }
   
    long long int substrCount (string s, int k) {
        
       // if(k == 1)
       // return findCount(s, k);
    	
    	unordered_map<char,int> mpf, mpS;
    	
    	long long int res = 0, left = 0, right = 0, j = 0, n = s.size();
    	
    	while(1)
    	{
    	    bool f1 = false, f2 = false, f3 = false;
    	   while(right < n-1)
    	   {
    	       f1 = true;
    	       char ch = s[right];
    	       mpf[ch]++;
    	       
    	       if(mpf.size() == k+1)
    	       {
    	           removeInMap(mpf, ch);
    	           --right;
    	           break;
    	       }
    	       
    	       ++right;
    	   }
    	   
    	   
    	   while(left < right)
    	   {
    	       f2 = true;
    	       char ch = s[left];
    	       mpS[ch]++;
    	       
    	       if(mpS.size() == k)
    	       {
    	           removeInMap(mpS, ch);
    	           --left;
    	           break;
    	       }
    	       
    	       ++left;
    	   }
    	   
    	   
    	   while(j < left)
    	   {
    	       f3 = true;
    	       if(mpf.size() == k && mpS.size() == k-1)
    	       {
    	           res += right - left;
    	       }
    	       char ch = s[j];
    	       removeInMap(mpf, ch);
    	       removeInMap(mpS, ch);
    	       
    	       if(mpf.size() < k || mpS.size() < k-1)
    	       {
    	           j--;
    	           break;
    	       }
    	       
    	       j++;
    	   }
    	   
    	   if(!f1 && !f2 && !f3) break;
    	   
    	   
    	}
    	
    	
    	return res;
    }
};
