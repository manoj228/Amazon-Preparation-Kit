// Time complexity : O(V+E)
// Space complexity : O(V)
class Solution
{
	public:
	void findTopo(int u, vector<int> adj[], vector<bool> &vis, stack<int> &st)
	{
	    vis[u] = true;
	    
	    for(auto it : adj[u])
	    {
	        if(!vis[it])
	        findTopo(it, adj, vis, st);
	    }
	    
	    st.push(u);
	}
	
	void dfs(int u, vector<int> transpose[], vector<bool> &vis)
	{
	    vis[u] = true;
	    
	    for(auto it : transpose[u])
	    {
	        if(!vis[it])
	        dfs(it, transpose, vis);
	    }
	}
	
    int kosaraju(int V, vector<int> adj[])
    {
        
        vector<bool> vis(V, false);
        stack<int> st;
        
        // do topo sort
        for(int i=0; i<V; i++)
        {
            if(!vis[i])
            findTopo(i, adj, vis, st);
        }

        // transpose the given graph
        vector<int> transpose[V];
        for(int i=0; i<V; i++)
        {
            vis[i] = false;
            for(auto it : adj[i])
            transpose[it].push_back(i);
        }
        
        int c = 0;
        // do dfs
        while(!st.empty())
        {
            int cur = st.top(); st.pop();
            
            if(!vis[cur])
            { 
                dfs(cur, transpose, vis);
                c++;
            }
        }
        
        return c;
    }
};
