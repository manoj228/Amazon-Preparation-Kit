Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]


// Time complexity : O(n*n)
// space complexity : O(1) (auxillary space : O(n))
class Solution {
public:
    bool isPalindrome(string s)
    {
        int start = 0, end = s.size()-1;
        while(start <= end)
        {
            if(s[start++] != s[end--]) return false;
        }
        
        return true;
    }
    
    void palinPartition(vector<vector<string>> &res, vector<string> &temp,
                       string givenString, int index)
    {
        if(index == givenString.size())
        {
            res.push_back(temp);
            return;
        }
        
        for(int i=index; i<givenString.size(); i++)
        {
            string curString = givenString.substr(index, i - index + 1);
            if(isPalindrome(curString))
            {
            temp.push_back(curString);
            
            palinPartition(res, temp, givenString, i+1);
            
            temp.pop_back();
            }
        }
    }
    
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> temp;
        
        palinPartition(res, temp, s, 0);
        
        return res;
    }
};
