Examples: 

Input: arr[] = {3, 10, 2, 1, 20}
Output: Length of LIS = 3
The longest increasing subsequence is 3, 10, 20

Input: arr[] = {3, 2}
Output: Length of LIS = 1
The longest increasing subsequences are {3} and {2}

Input: arr[] = {50, 3, 10, 7, 40, 80}
Output: Length of LIS = 4
The longest increasing subsequence is {3, 7, 40, 80}


1) DP Solution

// Time complexity : O(n * n)
// space complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

int longestSubsequence(int n, vector<int> a){
       vector<int> seq(n, 1);
       int maxLen = 1;
       
       for(int i=1; i<n; i++)
       {
           for(int j=0; j<i; j++)
           {
               if(a[j] < a[i])
               {
                   seq[i] = max(seq[i], seq[j]+1);
                   maxLen = max(maxLen, seq[i]);
               }
           }
       }
       
       
    return maxLen;
}

int main() {
	// your code goes here
	vector<int> arr{50, 3, 10, 7, 40, 80};
	
   cout << longestSubsequence(arr.size(), arr);
	return 0;
}


2) Optimal solution 

// Time complexity : O(nlogn)
// Space complexity : O(n)
class Solution {
public:
    int findLowerBound(vector<int> &res, int left, int right, int num)
    {
        while(left < right)
        {
            int mid = (left + right) >> 1;
            
            // if num is smaller, then we need to check
            // if any more values are less in left
            if(num <= res[mid])
                right = mid;
            
            else
                left = mid+1;
        }
        
        return left;
    }
    
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res;
        
        for(int i=0; i<nums.size(); i++)
        {
            // if res empty or last element less than cur element
            if(res.empty() || res.back() < nums[i])
            {
                res.push_back(nums[i]);
            }
            else{
                int index = findLowerBound(res, 0, res.size(), nums[i]);
                res[index] = nums[i];
            }
        }
        
        return res.size();
    }
};
