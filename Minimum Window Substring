Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


// Time compleixty : O(n)
// space complexity : O(n)
class Solution {
public:
    string minWindow(string s, string t) {
        
        if(t.size() > s.size()) return "";
        
        unordered_map<char, int> mp;
        for(auto c : t) mp[c]++;
        
        int left = 0, right = 0, minLen = INT_MAX, startIdx = -1;
        
        int counter = mp.size();
        
        while(right < s.size())
        {
            char ch = s[right];
            
            if(mp.find(ch) != mp.end())
            {
                mp[ch]--;
                
                if(mp[ch] == 0) counter--;
            }
            
            ++right;
            while(counter == 0)
            {
                if(minLen > right - left)
                {
                    minLen = right - left;
                    startIdx = left;
                }
                
                 char ch = s[left];
            
                 if(mp.find(ch) != mp.end()){
                     mp[ch]++;
                     
                     if(mp[ch] > 0) counter++;
                 }
                 
                ++left;
            }
        }
        if(startIdx == -1) return "";
        
        return s.substr(startIdx, minLen);
    }
};
