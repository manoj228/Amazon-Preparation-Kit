Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.


1)

// Time complexity : O(N)
// Space complexity : O(N)

class Solution{

    public:
    long long trappingWater(int arr[], int n){
        
       vector<long long> leftMax(n, 0), rightMax(n, 0);
       
       leftMax[0] = arr[0], rightMax[n-1] = arr[n-1];
       
       for(int i=1; i<n; i++)
       {
           leftMax[i] = max(leftMax[i-1], (long long)arr[i]);
       }
       
       for(int i=n-2; i>=0; i--)
       {
           rightMax[i] = max(rightMax[i+1], (long long)arr[i]);
       }
       
       long long res = 0;
       for(int i=0; i<n; i++)
       {
           res += min(rightMax[i], leftMax[i]) - (long long)arr[i];
       }
       
       return res;
    }
};


2)

// Time complexity : O(N)
// Space complexity : O(1)

class Solution{

    public:
    long long trappingWater(int arr[], int n){
        
       long long leftMax = arr[0], rightMax = arr[n-1], res = 0;
       
       long long left = 0, right = n-1;
       while(left < right)
       {
           leftMax = (leftMax < arr[left]) ? arr[left] : leftMax;
           rightMax = (rightMax < arr[right]) ? arr[right] : rightMax;
           
           res += (leftMax < rightMax) ? leftMax - arr[left++] : rightMax - arr[right--];
       }
       
       return res;
    }
};
