Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


// Time complexity : O(n)
// Space complexity : O(logn)

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        if(p.size() > s.size()) return {};
        
        unordered_map<char, int> mp;
        for(auto c : p) mp[c]++;
        
        int left = 0, right = 0, counter = mp.size();
        vector<int> res;
        while(right < s.size())
        {
            char ch = s[right];
            if(mp.find(ch) != mp.end())
            {
                mp[ch]--;
                
                if(mp[ch] == 0) counter--;
            }
     
            right++;
            
            while(counter == 0)
            {
                ch = s[left];
                
                if(mp.find(ch) != mp.end()) 
                {
                    mp[ch]++;
                
                    if(mp[ch] > 0) counter++;
                }
                
                
                if(right - left == p.size()) res.push_back(left);
                
                left++;
                
            }
            
        }
        
        return res;
        
    }
};
