Example 1:

Input: n = 6 
arr[] = {0900, 0940, 0950, 1100, 1500, 1800}
dep[] = {0910, 1200, 1120, 1130, 1900, 2000}
Output: 3
Explanation: 
Minimum 3 platforms are required to 
safely arrive and depart all trains.
Example 2:

Input: n = 3
arr[] = {0900, 1100, 1235}
dep[] = {1000, 1200, 1240}
Output: 1
Explanation: Only 1 platform is required to 
safely manage the arrival and departure 
of all trains. 



// Time complexity : O(n(logn + logn))
// space complexity : O(1)
class Solution{
    public:
    int findPlatform(int arr[], int dep[], int n)
    {
        sort(arr, arr+n);
        sort(dep, dep+n);
        
        int platForm = 1, maxRes = INT_MIN;
        int i = 1, j = 0;
        
        while(i < n)
        {
            if(dep[j] < arr[i])
            {
                platForm--;
                j++;
            }
            else{
                platForm++;
                i++;
            }
            
            maxRes = max(maxRes, platForm);
        }
        
        return maxRes;
    }
};
