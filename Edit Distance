Given two strings s and t. Return the minimum number of operations required to convert s to t.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1.


Example 2:

Input : 
s = "gfg", t = "gfg"
Output: 
0
Explanation: Both strings are same.




// Time complexity : O(n * m)
// space complexity : O(n * m)

class Solution {
  public:
    int findMinOperations(string s, string t, int n, int m, vector<vector<int>> &dp)
    {
        // if any of string out of bound, return remaining operation
        if(n < 0) return m+1;
        
        if(m < 0) return n+1;
        
        if(dp[n][m] != -1) return dp[n][m];
        
        if(s[n] == t[m]) 
        return dp[n][m] = findMinOperations(s, t, n-1, m-1, dp);
        
        // if characters doesn't match
        else{
            int insert = 1 + findMinOperations(s, t, n, m-1, dp);
            int removE = 1 + findMinOperations(s, t, n-1, m, dp);
            int replace = 1 + findMinOperations(s, t, n-1, m-1, dp);
            
            return dp[n][m] = min({insert, removE, replace});
        }
    }
  
    int editDistance(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        
        return findMinOperations(s, t, n-1, m-1, dp);
    }
};
