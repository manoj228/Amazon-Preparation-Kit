Example 1:

Input: A = "aabc"
Output: "a#bb"
Explanation: For every character first non
repeating character is as follow-
"a" - first non-repeating character is 'a'
"aa" - no non-repeating character so '#'
"aab" - first non-repeating character is 'b'
"aabc" - first non-repeating character is 'b'
Example 2:

Input: A = "zz"
Output: "z#"
Explanation: For every character first non
repeating character is as follow-
"z" - first non-repeating character is 'z'
"zz" - no non-repeating character so '#'


1) Using DLL
// Time complexity : O(1) // for accessing non-repeating character
// space complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

struct Node
{
	char data;
	Node *next, *prev;
	
	Node(char ch)
	{
		data = ch;
		next = prev = NULL;
	}
};

void insert(Node **head, Node **tail, char ch)
{
	Node *newNode = new Node(ch);
	
	if(*head == NULL)
	{
		*head = *tail = newNode;
		return;
	}
	
	(*tail)->next = newNode;
	newNode -> prev = (*tail);
	(*tail) = newNode;
}

void removeChar(Node **head, Node **tail, Node *temp)
{
	if(!(*head)) return;
	
	if((*head) == temp) (*head) = (*head)->next;
	if((*tail) == temp) (*tail) = (*tail)->prev;
	if(temp->next) temp->next->prev = temp->prev;
	if(temp->prev) temp->prev->next = temp->next;
	
	delete(temp);
}

void findNonRepeatingChar(string str)
{
	vector<Node*> presentInDLL(256,NULL);
	vector<bool> vis(256, false);
	
	Node *head = NULL, *tail = NULL;
	for(char ch : str)
	{
		// if char not visited
		if(!vis[ch])
		{
			// if char not visited and not present in dll
			if(!presentInDLL[ch])
			{
				insert(&head, &tail, ch);
				presentInDLL[ch] = tail;
			}
			else{
				removeChar(&head, &tail, presentInDLL[ch]);
				presentInDLL[ch] = NULL;
				vis[ch] = true;
			}
		}
		if(head)
		cout << head -> data << " ";
	}
}

int main() {
	
	string str;
	cin >> str;
	
	findNonRepeatingChar(str);
	
	return 0;
}

2) 
// Time complexity : O(26*n) 
// space complexity : O(26)
#include<bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;
	cin >> t;
	while(t--)
    {
        int n;
        cin >> n;
        
        char c;
        int cnt[26] = {0};
        queue<char> q;
        
        for(int i=0;i<n;i++)
        {
            cin >> c;
            
            q.push(c);
            cnt[c - 'a']++;
            
            while(!q.empty())
            {
                if(cnt[q.front() - 'a'] > 1) q.pop();
                else 
                {
                    cout << q.front() << " ";
                    break;
                }
            }
            
            if(q.empty())
            cout << "-1" << " ";
        }
        
        cout << endl;
    }
	return 0;
}
