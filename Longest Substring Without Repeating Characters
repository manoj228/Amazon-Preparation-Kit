Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0

// time complexity : O(n)
// space complexity : O(n)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size() == 0) return 0;
        
        unordered_map<char,int> mp;
        
        int left = 0, right = 0, maxLen = 0, n = s.size();
        
        while(right < n)
        {
            char ch = s[right];
            if(mp.find(ch) != mp.end())
            {
                left = max(left, mp[ch] + 1);                
            }
            
            mp[ch] = right;
            
            maxLen = max(maxLen, right - left + 1);
            
            ++right;
        }
        
        return maxLen;
    }
};
