Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.



1) DFS

// Time complexity : O(V+E)
// Space complexity : O(V)

class Solution {
  public:
    bool checkCycle(int u, vector<int> adj[], vector<bool> &vis, vector<bool> &rec)
    {
        if(!vis[u])
        {
            vis[u] = true;
            rec[u] = true;
            
            for(auto it : adj[u])
            {
                if(!vis[it])
                {
                    if(checkCycle(it, adj, vis, rec)) return true;
                }
                
                else if(rec[it])
                return true;
            }
        }
        
        rec[u] = false;
        
        return false;
    }
  
    bool isCyclic(int V, vector<int> adj[]) {
        
        vector<bool> vis(V, false), rec(V, false);
        
        for(int i=0; i<V; i++)
        {
            if(!vis[i])
            {
                if(checkCycle(i, adj, vis, rec))
                return true;
            }
        }
        
        return false;
    }
};


2) BFS

// Time complexity : O(V+E)
// Space complexity : O(V)

class Solution {
  public:
    bool isCyclic(int V, vector<int> adj[]) {
        
        vector<int> indegree(V, 0);
        for(int i=0; i<V; i++)
        {
            for(auto v : adj[i])
            indegree[v]++;
        }
        
        queue<int> todo;
        for(int i=0; i<V; i++)
        {
            if(indegree[i] == 0)
            todo.push(i);
        }
        
        int cnt = 0;
        while(!todo.empty())
        {
            auto curNode = todo.front(); todo.pop();
            
            cnt++;
            
            for(auto it : adj[curNode])
            {
                indegree[it]--;
                
                if(indegree[it] == 0)
                todo.push(it);
            }
        }
        
        return !(cnt == V);
    }
    
};
