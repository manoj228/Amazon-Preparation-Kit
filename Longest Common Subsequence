Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.


// Time complexity : O(m*n)
// Space complexity : O(m*n)

class Solution {
public:
    int findLCS(string &text1, int m, string &text2, int n, vector<vector<int>> &dp)
    {
        if(m == 0 || n == 0) return 0;
        
        if(dp[m-1][n-1] != -1) return dp[m-1][n-1];
        
        // if character matches
        if(text1[m-1] == text2[n-1]) 
            return dp[m-1][n-1] = 1 + findLCS(text1, m-1, text2, n-1, dp);
        
        // if not matches
        int left = findLCS(text1, m, text2, n-1, dp);
        int right = findLCS(text1, m-1, text2, n, dp);
        
        return dp[m-1][n-1] = max(left, right);
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        return findLCS(text1, m, text2, n, dp);
    }
};
