Example 1:

Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.
Example 2:

Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91


// Time complexity : O(n logn)
// Space complexity : O(1)

class Solution {
public:
    int maximumUnits(vector<vector<int>>& box, int truckSize) {
        sort(box.begin(), box.end(), [](vector<int> a, vector<int>b)
             {
                return a[1] > b[1]; 
             });
        
        int boxSize = 0, res = 0, i = 0;
        
        while(i < box.size() && boxSize < truckSize)
        {
            if(boxSize + box[i][0] <= truckSize)
            res += box[i][0] * box[i][1], boxSize += box[i][0];
            else{
                res += (truckSize - boxSize) * box[i][1];
                boxSize += (truckSize - boxSize);
            }    
             
            i++;
        }
         
        return res;
    }
};
