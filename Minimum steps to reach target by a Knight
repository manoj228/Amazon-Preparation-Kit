Example 1:
Input:
N=6
knightPos[ ] = {4, 5}
targetPos[ ] = {1, 1}
Output:
3
Explanation:

Knight takes 3 step to reach from 
(4, 5) to (1, 1):
(4, 5) -> (5, 3) -> (3, 2) -> (1, 1).



// Time complexity : O(n * n)
// Space complexity : O(n ( n)
class Solution 
{
    public:
    bool check(int x, int y, int r, int c)
    {
        return (x < 0 || y < 0 || x > r || y > c);
    }
    
	int minStepToReachTarget(vector<int> &knight,vector<int> &target,int N)
	{
	   int steps = 0;
	   
	   queue<pair<int,int>> q;
	   q.push({knight[0], knight[1]});
	   
	   vector<vector<bool>> vis(N+1, vector<bool>(N+1, false));
	   
	   vis[knight[0]][knight[1]] = true;
	    
	   int dx[] = {-1, -1, 1,  1, 2,  2, -2, -2};
	   int dy[] = { 2, -2, 2, -2, 1, -1,  1, -1};
	   
	   while(!q.empty())
	   {
	       int n = q.size();
	       
	       while(n--)
	       {
	       int kx = q.front().first, ky = q.front().second;
	       q.pop();
	       
	       for(int i=0; i<8; i++)
	       {
	           int nx = kx + dx[i], ny = ky + dy[i];
	           
	           if(check(nx, ny, N, N) || vis[nx][ny]) continue;
	           
	           if(nx == target[0] && ny == target[1]) return steps+1;
	           
	           if(!vis[nx][ny])
	           {
	               vis[nx][ny] = true;
	               q.push({nx, ny});
	           }
	       }
	       
	       }
	       
	        ++steps;
	      
	   }
	   
	   return 0;
	}
};
