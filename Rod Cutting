Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.

Example 2:

Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 1, i.e, 8*3=24. 



// Time complexity : O(n*n)
// space complexity : O(n*n)
class Solution{
  public:
    int findMaxProfit(int price[], int n, vector<int> wt, vector<vector<int>> &dp, int rodLen)
    {
        if(n == 0 || rodLen == 0) return 0;
        
        if(dp[n][rodLen] != -1) return dp[n][rodLen];
        
        if(wt[n-1] <= rodLen)
        {
            // if picking cur length
            int pick = price[n-1] + findMaxProfit(price, n, wt, dp, rodLen - wt[n-1]);
            
            // if not pick
            int notPick = findMaxProfit(price, n-1, wt, dp, rodLen);
            
            return dp[n][rodLen] = max(pick, notPick);
        }
        
        else
        
        return dp[n][rodLen] = findMaxProfit(price, n-1, wt, dp, rodLen);
    }
  
    int cutRod(int price[], int n) {
       
       vector<int> wt(n);
       for(int i=0; i<n; i++) wt[i] = i+1;
       
       vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
       
       return findMaxProfit(price, n , wt, dp, n);
    }
};
