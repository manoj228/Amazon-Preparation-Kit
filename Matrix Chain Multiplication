Example 1:

Input: N = 5
arr = {40, 20, 30, 10, 30}
Output: 26000
Explaination: There are 4 matrices of dimension 
40x20, 20x30, 30x10, 10x30. Say the matrices are 
named as A, B, C, D. Out of all possible combinations,
the most efficient way is (A*(B*C))*D. 
The number of operations are -
20*30*10 + 40*20*10 + 40*10*30 = 26000.

Example 2:

Input: N = 4
arr = {10, 30, 5, 60}
Output: 4500
Explaination: The matrices have dimensions 
10*30, 30*5, 5*60. Say the matrices are A, B 
and C. Out of all possible combinations,the
most efficient way is (A*B)*C. The 
number of multiplications are -
10*30*5 + 10*5*60 = 4500.



// Time complexity : O(N*N*N)
// space complexity : O(N*N)
class Solution{
public: 
    int findMinMul(int arr[],int i, int j, vector<vector<int>> &dp)
    {
        // whenever we have a single element
        if(i == j) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int mini = INT_MAX;
        /* A  B  C  D
             |  |  |
        so , we need to partition into 3
        */
        for(int k=i; k<j; k++)
        {
            // find no of multiplication
            int count = findMinMul(arr, i, k, dp) + findMinMul(arr, k+1, j, dp) +
            
            // to count the no of multiplication 
            // A | B C D 
                    arr[i-1] * arr[k] * arr[j];
                    
            mini = min(mini, count);
        }
        
        return dp[i][j] = mini;
    }


    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N, vector<int>(N, -1));
        return findMinMul(arr, 1, N-1, dp);
    }
};
