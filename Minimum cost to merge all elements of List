Input: arr[] = {1, 3, 7} 
Output: 15 
All possible ways of merging: 
a) {1, 3, 7} (cost = 0) -> {4, 7} (cost = 0+4 = 4) -> 11 (cost = 4+11 = 15) 
b) {1, 3, 7} (cost = 0) -> {1, 10} (cost = 0+10= 10) -> 11 (cost = 10+11 = 21) 
Thus, ans = 15
Input: arr[] = {1, 2, 3, 4} 
Output: 19 

// Time complexity : O(nlogn)
// space complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

void findMinCost(vector<int> &arr, int n)
{
	priority_queue<int, vector<int>, greater<int>> pq;
	for(auto ele : arr) pq.push(ele);
	
	int cost = 0;
	
	while(pq.size() > 1)
	{
		int a = pq.top(); pq.pop();
		int b = pq.top(); pq.pop();
		
		int c = a + b;
		cost += c;
		
		pq.push(c);
	}
	
	cout << cost << endl;
}

int main() {
	// your code goes here
	vector<int> arr{1,2,3,4};
	int n = arr.size();
	
	findMinCost(arr, n);
	
	return 0;
}
